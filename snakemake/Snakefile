
# report: "report/workflow.rst"

# FILE = "in/Stardist/Test - Images/cell migration R1 - Position 58_XY1562686154_Z0_T00_C1-image76.tif"

FILE = "in/Stardist/Test - Images/cell migration R1 - Position 58_XY1562686154_Z0_T00_C1-image76.tif"
FILE = "in/Stardist/Test - Images/cell migration R1 - Position 58_XY1562686154_Z0_T00_C1-image76.tif"
FILE_OUT = "out/out.zarr"
FILE_OUT_PNG = "out/out.png"
# FILE_OUT_QUALITY = "quality.txt"
FILE_OUT_QUALITY = "out/quality"


IMAGES_DIR = "in/Stardist/Training - Images/"
MASKS_DIR = "in/Stardist/Training - Masks/"
MODEL_OUT = "models"

IMAGES_IN, = glob_wildcards("in/Stardist/Test - Images/{input_images}.tif")
EXT = ".tif"

# All is a special rule that takes in the last output of the pipeline
rule all:
	input:
		FILE_OUT_PNG,
		FILE_OUT,FILE,
		MODEL_OUT,
		MODEL_OUT,
		FILE_OUT_QUALITY,
        expand("stardist_out/{images_in}.png", images_in=IMAGES_IN)

rule scale_image_down_make_zarr:
	input:
		FILE
	output:
		directory(FILE_OUT)
	# container:
	# 	"docker://continuumio/miniconda"
	conda:
		"environment.yml"
	shell:
		"python cool_script.py '{input}' '{output}'"
	# script:
	#     "cool_script.py {input} {output}"

rule make_a_nice_png:
	input:
		FILE_OUT
	output:
		FILE_OUT_PNG
	conda:
		"environment.yml"
	shell:
		"python cool_script_2.py '{input}' '{output}'"

rule docker_leg:
	input:
		FILE
	output:
		directory(FILE_OUT_QUALITY)
	container:
		"docker://ctr26/microscopeimagequality:latest"
	shell:
		"microscopeimagequality predict --output '{output}' '{input}'"


rule dist_training:
	input:
		images_dir="in/Stardist/Training - Images/",
		masks_dir="in/Stardist/Training - Masks/"
	output:
	    directory(MODEL_OUT)
	conda:
	    "stardist.yml"
	shell:
		"python \
        stardist_training.py \
        --images_dir='{input.images_dir}'\
        --masks_dir='{input.masks_dir}'\
        --model_path='{output}'\
        --ext='.tif'\
        --epochs=50\
        "

rule dist_inference:
    input:
        model=MODEL_OUT,
        images_in="in/Stardist/Test - Images/{images_in}.tif"
    output:
       "stardist_out/{images_in}.png"
    conda:
        "stardist.yml"
    shell:
        "python stardist_infer.py \
                --image_in='{input.images_in}' \
                --model_path='{input.model}' \
                --figure_out='{output}' \
        "


rule report:
	input: FILE_OUT_QUALITY
	output: "report.html"
	shell: "snakemake --report report.html"
